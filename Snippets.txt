// These might be inefficient but get the job done with the basics

// Get nth vaue of Lists/Sequences without nth

(fn foo [m n]
  (if (> n 0)
  (foo (rest m) (- n 1))
  (first m)
  )
)

// Count of a sequence given a sequence without count

#((partial (fn foo [mycount m]
  (if (not= (rest m) '())
  (foo (+ mycount 1) (rest m))
  mycount
)
) 1) %)


// Return sum of sequence

(fn [s] (reduce #(+ %1 %2) s))

// Return Odd numbers

(fn [s] (filter #(= (rem % 2) 1) s))

